inner_join(bing_no_miss, by = "word") %>%
count(book, index = linenumber %/% 50, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n = 0)) %>%
mutate(net = positive - negative) %>%
ggplot(aes(index, net, fill = book)) +
ggtitle("Without Miss as Negative" ) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x") ->
p2
library(gridExtra)
grid.arrange(p1, p2, nrow=2)
# Interpretation:
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word")
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment)
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
filter(sentiment == "negative") %>%
count(book, index = linenumber %/% 500, sentiment)
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
filter(sentiment == "negative" & sentiment == "positive") %>%
count(book, index = linenumber %/% 500, sentiment)
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
filter(sentiment == "negative" | sentiment == "positive") %>%
count(book, index = linenumber %/% 500, sentiment)
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
filter(sentiment == "negative" | sentiment == "positive")
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
filter(sentiment == "negative" | sentiment == "positive") %>%
count(book, index = linenumber %/% 500, sentiment)
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
filter(sentiment == "negative" | sentiment == "positive") %>%
count(book, index = linenumber %/% 50, sentiment)
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
filter(sentiment == "negative" | sentiment == "positive") %>%
count(book, index = linenumber %/% 500, sentiment)
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(sentiment == "negative" | sentiment == "positive")
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment)
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive"))
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n=0)) %>%
mutate(net = positive - negative) %>%
ggplot(aes(index, net, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n=0))
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n=0)) %>%
ggplot(aes(index, net, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive"))
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n=0)) %>%
ggplot(aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE)
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
# pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n=0)) %>%
ggplot(aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
# pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n=0)) %>%
ggplot(aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(sentiment~book, ncol = 2, scales = "free_x")
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
# pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n=0)) %>%
ggplot(aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive"))
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n=0))
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
# pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n=0)) %>%
group_by(sentiment) %>%
count()
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
# pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n=0)) %>%
group_by(book, sentiment) %>%
count()
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
# pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n=0)) %>%
group_by(book, sentiment, index) %>%
count()
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive")) %>%
# pivot_wider(names_from = sentiment, values_from = n, values_fill = list(n=0)) %>%
group_by(book, sentiment, index) %>%
count() %>%
ungroup() %>%
ggplot(aes(index, n, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(sentiment~book, ncol = 2, scales = "free_x")
twobooks_tidy %>%
inner_join(get_sentiments("nrc"), by = "word") %>%
count(book, index = linenumber %/% 500, sentiment) %>%
filter(!(sentiment == "negative" | sentiment == "positive"))
meta_fields
gutenberg_works() %>%
filter(str_detect(author, "Mark Twain"))
gutenberg_works() %>%
filter(str_detect(author, "Twain"))
gutenberg_works() %>%
filter(str_detect(title, "Huckleberry Finn"))
gutenberg_works() %>%
filter(str_detect(title, c("Huckleberry Finn", "Tom Sawyer")))
gutenberg_works() %>%
filter(str_detect(title, c("Huckleberry Finn", "Tom Sawyer", "Connecticut Yankee in King Arthur's Court", "Life on the Mississippi", "Prince and the Pauper", "A Tramp Abroad")))
gutenberg_works() %>%
filter(str_detect(title, c("Huckleberry Finn", "Tom Sawyer", "Connecticut Yankee in King Arthur's Court", "Life on the Mississippi", "Prince and the Pauper", "A Tramp Abroad"))) %>%
selet(gutenberg_id)
gutenberg_works() %>%
filter(str_detect(title, c("Huckleberry Finn", "Tom Sawyer", "Connecticut Yankee in King Arthur's Court", "Life on the Mississippi", "Prince and the Pauper", "A Tramp Abroad"))) %>%
select(gutenberg_id)
gutenberg_works() %>%
filter(str_detect(title, c("Huckleberry Finn", "Tom Sawyer", "Connecticut Yankee in King Arthur's Court", "Life on the Mississippi", "Prince and the Pauper", "A Tramp Abroad"))) %>%
select(gutenberg_id) %>%
as.character()
gutenberg_works() %>%
filter(str_detect(title, c("Huckleberry Finn", "Tom Sawyer", "Connecticut Yankee in King Arthur's Court", "Life on the Mississippi", "Prince and the Pauper", "A Tramp Abroad"))) %>%
select(gutenberg_id) %>%
as.character() ->
marksbook
gutenberg_download(marksbook)
gutenberg_works() %>%
filter(str_detect(title, c("Huckleberry Finn", "Tom Sawyer", "Connecticut Yankee in King Arthur's Court", "Life on the Mississippi", "Prince and the Pauper", "A Tramp Abroad"))) %>%
select(gutenberg_id)
gutenberg_works() %>%
filter(str_detect(title, c("Huckleberry Finn", "Tom Sawyer", "Connecticut Yankee in King Arthur's Court", "Life on the Mississippi", "Prince and the Pauper", "A Tramp Abroad")))
gutenberg_works() %>%
filter(str_detect(title, c("Huckleberry Finn", "Tom Sawyer", "Connecticut Yankee in King Arthur's Court", "Life on the Mississippi", "Prince and the Pauper", "A Tramp Abroad"))) ->
mtsbook
gutenberg_works() %>%
filter(str_detect(title, c("Huckleberry Finn", "Tom Sawyer", "Connecticut Yankee in King Arthur's Court", "Life on the Mississippi", "Prince and the Pauper", "A Tramp Abroad"))) ->
mtsbook
mtsid <- mtsbook$gutenberg_id
gutenberg_download(mtsid)
gutenberg_download(mtsid, meta_fields = author)
gutenberg_download(mtsid, meta_fields = "author")
mtsbooks_df <- gutenberg_download(mtsid, meta_fields = "author")
gutenberg_works() %>%
filter(str_detect(title, c("Huckleberry Finn", "Tom Sawyer", "Connecticut Yankee in King Arthur's Court", "Life on the Mississippi", "Prince and the Pauper", "A Tramp Abroad"))) ->
mtsbook
mtsid <- mtsbook$gutenberg_id # store ids
mtsbooks_df <- gutenberg_download(mtsid, meta_fields = "author") # download the books
View(mtsbooks_df)
to_tfidf <- function(x){
x %>%
mutate(linenumber = row_number(),               # add line and chapter numbers as variables
chapter = cumsum(str_detect(text,
regex("^chapter [ivxlc]",
ignore_case = TRUE)))) %>%
unnest_tokens(word, text) %>%                   # unnest tokens at the word level
mutate(word = str_extract(word, "[a-z']+")) %>% # only the words remain
filter(chapter != 0) %>%                        # remove any front matter
count(book, word, sort = TRUE) ->
y
y %>%
group_by(book) %>%
summarize(total = sum(n), .groups = "keep") ->
total_words
y %>%
left_join(total_words, by = "book") ->
y
y
}
to_tfidf(mtsbooks_df)
mtsbooks_df %>%
mutate(linenumber = row_number(),               # add line and chapter numbers as variables
chapter = cumsum(str_detect(text,
regex("^chapter [ivxlc]",
ignore_case = TRUE)))) %>%
unnest_tokens(word, text) %>%                   # unnest tokens at the word level
mutate(word = str_extract(word, "[a-z']+")) %>% # only the words remain
filter(chapter != 0) %>%                        # remove any front matter
count(word, sort = TRUE)
mtsbooks_df %>%
mutate(linenumber = row_number(),               # add line and chapter numbers as variables
chapter = cumsum(str_detect(text,
regex("^chapter [ivxlc]",
ignore_case = TRUE)))) %>%
unnest_tokens(word, text) %>%                   # unnest tokens at the word level
mutate(word = str_extract(word, "[a-z']+")) %>% # only the words remain
filter(chapter != 0) %>%                        # remove any front matter
count(title, word, sort = TRUE)
knitr::opts_chunk$set(echo = TRUE)
covid_data <- read.csv("../../DS_final_data/COVID-19_Case.csv")
covid_data <- read.csv("~/Desktop/STAT613/Data Science Project/covid_data.csv")
covid_data <- read.csv("../DS_final_data/COVID-19_Case.csv")
# Remove all rows with NA values in the race column
covid_data <- covid_data[!is.na(covid_data$race), ]
# Remove all rows containing "Missing" values in the race column
covid_data <- covid_data[-grep("Missing", covid_data$race), ]
# Remove all rows containing "Unknown" values in the race column
covid_data <- covid_data[-grep("Unknown", covid_data$race), ]
View(covid_data)
covid_data <- read.csv("../DS_final_data/COVID-19_Case.csv")
# Remove all rows with NA values in the race column
covid_data <- covid_data[!is.na(covid_data$race), ]
# Remove all rows containing "Missing" values in the race column
covid_data <- covid_data[-grep("Missing", covid_data$race), ]
# Remove all rows containing "Unknown" values in the race column
covid_data <- covid_data[-grep("Unknown", covid_data$race), ]
covid %>%
saveRDS(../Data/tidy_covid19_case.rds)
covid_data %>%
saveRDS(../Data/tidy_covid19_case.rds)
covid_data %>%
saveRDS("../Data/tidy_covid19_case.rds")
covid_data %>%
saveRDS("/Data/tidy_covid19_case.rds")
covid_data %>%
saveRDS("Data/tidy_covid19_case.rds")
View(covid_data)
covid_data %>%
select(-case_positive_specimen_interval, -case_onset_interval) ->
covid_data
View(covid_data)
covid_data %>%
select(-case_positive_specimen_interval, -case_onset_interval, -exposure_yn) ->
covid_data
covid_data %>%
select(-exposure_yn) ->
covid_data
covid_data %>%
saveRDS("Data/tidy_covid19_case.rds")
library(readr)
library(tidyverse)
library(ggplot2)
readr::readRDS("../Data/tidy_covid19_case.rds") ->
covid19_data
readRDS("../Data/tidy_covid19_case.rds") ->
covid19_data
readRDS("../Data/tidy_covid19_case.rds") ->
covid19_data
setwd("~/Documents/Stat_613_DS/DS_hw/hw_08-Stephanie9606/analysis")
setwd("~/Documents/Stat_613_DS/DS_final_project")
shiny::runApp('DS_Final_App')
runApp('DS_Final_App')
readr::read_rds("data/tidy_covid19_case.rds") ->
covid19_data
setwd("~/Documents/Stat_613_DS/DS_final_project/DS_Final_App")
runApp()
library(readr)
library(ggplot2)
library(tidyverse)
library(lubridate)
readr::read_rds("DS_Final_App/data/tidy_covid19_case.rds") ->
covid19
covid19 %>%
na_if("Missing") %>%
na_if("Unknown") %>%
mutate(case_month = ym(case_month)) %>%
mutate(age_group = str_replace(age_group, "to", "-"),
age_group = str_replace(age_group, "years", "")) %>%
mutate(age_group = as.factor(age_group),
sex = as.factor(sex),
hosp_yn = as.factor(hosp_yn),
icu_yn = as.factor(icu_yn),
death_yn = as.factor(death_yn),
underlying_conditions_yn = as.factor(underlying_conditions_yn))  ->
covid19_tidy
covid19_tidy %>%
filter(between(case_month, "2020-10-01", "2020-11-01")) %>%
group_by(case_month, race) %>%
summarise(total_case = n(), .groups = "keep") %>%
ggplot(aes(x = case_month, y = total_case, color = race)) +
geom_smooth(se = F)
covid19_tidy %>%
filter(between(case_month, 2020-10-01, 2020-11-01)) %>%
group_by(case_month, race) %>%
summarise(total_case = n(), .groups = "keep") %>%
ggplot(aes(x = case_month, y = total_case, color = race)) +
geom_smooth(se = F)
covid19_tidy %>%
filter(between(ym(case_month), "2020-10-01", "2020-11-01")) %>%
group_by(case_month, race) %>%
summarise(total_case = n(), .groups = "keep") %>%
ggplot(aes(x = case_month, y = total_case, color = race)) +
geom_smooth(se = F)
View(covid19_tidy)
covid19_tidy %>%
filter(between(case_month, "2020-10-01", "2020-11-01"))
covid19_tidy %>%
filter(between(case_month, "2020-10", "2020-11"))
covid19_tidy %>%
filter(case_month = between(case_month, "2020-10", "2020-11"))
covid19_tidy %>%
filter(case_month == between(case_month, "2020-10", "2020-11"))
covid19_tidy %>%
filter(case_month == between(case_month, "2020-10-01", "2020-10-01"))
covid19_tidy %>%
filter(case_month == between(ym(case_month), "2020-10-01", "2020-10-01"))
covid19_tidy %>%
filter(case_month == between(ymd(case_month), "2020-10-01", "2020-10-01"))
covid19_tidy %>%
filter(case_month == between(ymd(case_month), "2020-10-01", "2020-11-01"))
covid19_tidy %>%
drop_na(case_month) %>%
filter(case_month == between(ymd(case_month), "2020-10-01", "2020-11-01"))
covid19_tidy %>%
filter(case_month == between(ymd(case_month), as.Date("2020-10-01"), as.Date("2020-11-01")))
covid19_tidy %>%
filter(between(case_month, as.Date("2020-10-01"), as.Date("2020-11-01")))
runApp()
covid19_tidy %>%
filter(between(case_month, as.Date("2021-01-01"), as.Date("2021-03-01")))
covid19_tidy %>%
filter(between(case_month, as.Date("2021-01-01"), as.Date("2021-03-01")))
covid19_tidy %>%
filter(case_month == "2021-03-01")
covid19_tidy %>%
filter(case_month == "2021-04-01")
runApp()
runApp()
runApp()
covid19_tidy %>%
filter(between(case_month, as.Date("2021-01-01"), as.Date("2021-03-01"))) %>%
group_by(case_month, race) %>%
summarise(total_case = n(), .groups = "keep") %>%
ggplot(aes(x = case_month, y = total_case, color = race)) +
geom_smooth(se = F)
covid19_tidy %>%
filter(between(case_month, as.Date("2020-05-01"), as.Date("2021-03-01"))) %>%
group_by(case_month, race) %>%
summarise(total_case = n(), .groups = "keep") %>%
ggplot(aes(x = case_month, y = total_case, color = race)) +
geom_smooth(se = F)
covid19_tidy %>%
filter(case_month == "2020-01-01")
runApp()
covid19_tidy %>%
arrange(case_month)
covid19_tidy %>%
filter(between(case_month, as.Date("2021-01-01"), as.Date("2021-03-01"))) %>%
arrange(case_month)
View(covid19_tidy)
library(readr)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(readr)
library(ggplot2)
library(tidyverse)
library(lubridate)
covid19_tidy %>%
filter(res_state == "DE")
covid19_tidy %>%
filter(res_state == "DW")
covid19_tidy %>%
filter(res_state == "DS")
covid19_tidy %>%
filter(res_state == "DC")
View(covid19_tidy)
unique(covid19_tidy[c("res_state")])
setwd("~/Documents/Stat_613_DS")
library(readr)
library(tidyverse)
library(readr)
library(tidyverse)
covid_data <- read.csv("../../../DS_final_data/COVID-19_Case.csv")
covid_data %>%
select(-case_positive_specimen_interval, -case_onset_interval, -exposure_yn, -state_fips_code, -county_fips_code) ->
covid_data
covid_data %>%
saveRDS("../Data/covid19_data.rds")
# readRDS("../Data/covid19_data.rds") ->
#   tryreadrds
library(tidyverse)
library(lubridate)
# read rds
readr::read_rds("../data/tidy_covid19_data.rds") ->
covid19_data
setwd("~/Documents/Stat_613_DS/DS_final_project/DS_Final_App")
library(tidyverse)
library(lubridate)
# read rds
readr::read_rds("../data/tidy_covid19_data.rds") ->
covid19_data
library(tidyverse)
library(lubridate)
# read rds
readr::read_rds("../data/covid19_data.rds") ->
covid19_data
# clean data
covid19_data %>%
na_if("Missing") %>%
na_if("Unknown") %>%
mutate(case_month = ym(case_month)) %>%
mutate(age_group = str_replace(age_group, "to", "-"),
age_group = str_replace(age_group, "years", "")) %>%
mutate(age_group = as.factor(age_group),
sex = as.factor(sex),
hosp_yn = as.factor(hosp_yn),
icu_yn = as.factor(icu_yn),
death_yn = as.factor(death_yn),
underlying_conditions_yn = as.factor(underlying_conditions_yn))  ->
covid19_tidy
# tidy data
# merge long/lat for shiny map
# only focus on the US 51 states
# long/ lat data from [link]:
# https://www.kaggle.com/washimahmed/usa-latlong-for-state-abbreviations
long_lat <- read_csv("../data/statelatlong.csv")
long_lat %>%
rename(state = City, abbr_state = State)-> long_lat
covid19_tidy %>%
left_join(long_lat, by = c("res_state" = "abbr_state")) %>%
filter(res_state != "GU", res_state !=  "VI", res_state != "PR") ->covid19_tidy
# check if we already removed GU, VI, PR, which are outside the US territories
# setdiff(unique(covid19_tidy$res_state), unique(log_lat$State))
covid19_tidy %>%
saveRDS("../data/covid19_tidy.rds")
readRDS("../data/covid19_tidy.rds") ->
tryreadrds
runApp()
View(covid19_tidy)
runApp()
unique(covid19_tidy[c("res_state")])
covid19_tidy %>%
filter(case_month == "2020-01-01")
covid19_tidy %>%
filter(case_month == "2020-02-01")
covid19_tidy %>%
filter(case_month == "2020-03-01")
covid19_tidy %>%
filter(case_month == "2020-04-01")
covid19_tidy %>%
filter(case_month == "2021-01-01")
covid19_tidy %>%
filter(case_month == "2021-02-01")
covid19_tidy %>%
filter(case_month == "2021-03-01")
runApp()
setwd("~/Documents/Stat_613_DS/DS_final_project")
runApp('DS_Final_App')
setwd("~/Documents/Stat_613_DS/DS_final_project/DS_Final_App")
runApp()
runApp()
covid19_tidy %>%
select(-res_county) %>%
filter(case_month != "2021-01-01") %>%
filter(case_month != "2021-02-01") %>%
filter(case_month != "2021-03-01") ->
covid19_tidy
setwd("~/Documents/Stat_613_DS/DS_final_project/DS_Final_App")
covid19_tidy %>%
saveRDS("../data/covid19_tidy.rds")
setwd("~/Documents/Stat_613_DS/DS_final_project/DS_Final_App/data")
runApp('~/Documents/Stat_613_DS/DS_final_project/DS_Final_App')
setwd("~/Documents/Stat_613_DS/DS_final_project/DS_Final_App")
runApp()
